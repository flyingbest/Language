/*
	가상 함수가 실제로 가리키는 객체에 따라 실행 코드가 달라지고, 재정의
	할 수 있는 함수인 반면에, 순수 가상 함수는 함수의 선언만 있고 정의는
	없는 것으로, 자식 클래스에서 반드시 재정의하여야만 한다.
	
	순수 가상 함수는 정의를 제외하고, 뒤부분에다 '= 0'을 덧붙이면 된다.
*/

#include <iostream>
using namespace std;

class Parent{
public:
	virtual void func() = 0;	// 순수 가상 함수 선언( 몸체 부분 정의 X )
};

class Child : public Parent{
public:
	// 가상 함수 재정의.
	// 부모 클래스 내의 순수 가상 함수는,
	// 자식 클래스 내에서 반드시 재정의(Overriding) 되어야 한다.
	virtual void func(){
		cout << "자식 클래스의 func 함수 호출!" << endl;
	}
};

int main(){
	//Parent p;
	Parent* p;

	p = new Child;
	p->func();
	
	return 0;
}

/*
	즉, 추상 클래스는 객체를 만들 수 없다는 말이 된다. 왜냐 몸체도 정의되어
	있지 않은 추상 클래스의 객체를 만든다는 것은 생각해보면 아무런 의미가 없다.

	하지만 추상 클래스의 포인터는 선언할 수 있다.
	자식 클래스의 객체를 만들어 그곳을 가리키게 하고, 부모 클래스의 포인터로
	func 함수에 접근.
	(참고로, 추상 클래스는 순수 가상 함수 선언을 하나라도 포함하면 그 클래스는
	추상 클래스가 된다는 것.	또한, 추상 클래스를 상속하고 그 상속받은 클래스
	에서 순수 가상 함수를 정의하지 않으면 그 클래스도 추상 클래스가 된다.)

*/
